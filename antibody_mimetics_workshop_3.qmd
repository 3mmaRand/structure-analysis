---
title: "Workshop: programmatic protein structure analysis"
subtitle: "BIO00088H - Group Research Project"
author: "Emma Rand"
engine: knitr
---

# Based on the [Antibody Mimetics Workshop](https://colab.research.google.com/drive/1BOmOi9e_yHeFXucBnYwUCJmFfZLBRFKf) by Michael Plevin & Jon Agirre

## Understanding this document in RStudio

You are using RStudio which is an integrated development environment (IDE) initially developed for R. It can now be used for many other languages including Python. Some set is is required which is covered in [Structure Data Analysis for Group Project](https://3mmarand.github.io/BIO00088H-data/structure/structures.html). This in contrast to the Colab notebook which is cloud-based and does not require any set up (except installing packages)

You might find RStudio useful for Python because you are already familiar with it. It is also a very good way to create [Quarto documents](https://3mmarand.github.io/BIO00088H-data/core/week-11/overview.html) with code chunks in more than one language. This document is an example of that.

For example, this is an R code chunk. You can run it by clicking on the green arrow in the top right of the chunk. Or do `Cmd+Return` on a Mac or `Ctrl+Return` on Windows.

```{r}
getwd()
```

Notice:

-   prompt in the console is `>` as you are used to in R.
-   The Environment Pane is showing an R environment

![Screenshot of RStudio highlighting that the prompt is an R prompt (\>) and the environment is the R environment](images/r-chunk-in-quarto.png)

This is a Python code chunk. You can also run it by clicking on the green arrow in the top right of the chunk. Or do `Cmd+Return` on a Mac or `Ctrl+Return` on Windows.

```{python}
import os
os.getcwd()
```

Notice:

-   the R command `reticulate::repl_python()` was sent to the console to start Python
-   prompt in the console is `>>>`. This is the Python prompt. If you try typing R code like `getwd()` in the console at the `>>>` prompt you will get an error.
-   The Environment Pane is showing a Python environment containing an 'interface' to the r environment. This is the `r` object.

![Screenshot of RStudio highlighting that the prompt is a Python prompt (\>\>\>) and the environment is the Python environment containing an object r](images/py-chunk-in-quarto.png)

If you type `r.getwd()` in the console at the Python prompt you don't get an error. You get the same result as you did in the R code chunk above

This is because you can access R commands and R objects from your Python environment using the `r` object. For example, you can access an R vector object `an_r_obj` from Python using `r.an_r_obj`.

Run this code to create a vector in R called `an_r_obj`:

```{r}
an_r_obj <- c(1, 2, 3)
str(an_r_obj)
```

You'll see `quit` is sent to the Python prompt to exit Python and run the R command.

Try to access it from Python:

```{python}
#| error: true
an_r_obj

```

You get an error because Python does not know about the R object `an_r_obj`. But you *can* access it using the `r` object:

```{python}
r.an_r_obj
type(r.an_r_obj)

```

You can 'copy' it to your python environment if you want:

```{python}
acopy = r.an_r_obj
type(acopy)
```

`acopy` is in your Python environment now.

Magic!

Datatypes differ between the languages. Reticulate converts some automatically - for example R vectors to Python lists. For some other datatypes you must explicitly convert.

You can also access Python objects from R using the `py` object. For example, you can access the Python list object `a_python_obj` from R using `py$a_python_obj`. However you do need to have loaded the `reticulate` package in R first.

```{python}
a_python_obj = [4, 5, 6]
```

```{r}
library(reticulate)
```

```{r}
py$a_python_obj
```

-   You access objects in the Python environment from R in an R-like way using `py$`

-   You access objects in the R environment from Python in a Python-like way using `r.`

## Getting started

This RStudio Project already has a folder containing the `4INS.pdb` file. I have called the folder `pdb_files`. Jon called his folder `download`. When you are doing your own work in RStudio you can make folders by:

-   clicking on the New Folder button in the Files Pane OR
-   typing `mkdir pdb_files` in the *Terminal* OR
-   typing `fs::dir_create("pdb_files")` at the R console

You can download a pdb by typing `curl https://files.rcsb.org/download/4INS.pdb -o pdb_files/4INS.pdb` in the *Terminal*

I have used `curl` rather than `wget` because `wget` because most macOS and Windows do not come with `wget` by default. They mostly do have the very similar `curl`. Use is very similar but notice it is a lowercase `-o` for output rather than a capital `-O`.

I would tend not to have this "house-keeping" (making folders, downloading through the terminal) in my reproducible document. I would, however, explain the directory structure and where the data files came from in the README.md file. Later we download data using a Python command. I probably would have that in my reproducible document.[^1]

[^1]: The decision on whether to download data from the internet before an analysis, or download each time the analysis runs, depends on the circumstances. If the data definitely will not be updated it does not really matter. If they do get updated you would want to download before and record the date if you are writing a publication but download fresh each time if you are providing a live update like web application.

## Analysis code

Most of the text explanation here is taken directly from Jon and Michael's document.

```{python}
# Import the `gemmi` package
import gemmi
```

4INS is a 1.5 angstroems structure of insulin. We have seen structures of insulin in our first workshop.

You can open the file to view it by clicking on it in the Files Pane.

Here are a few basic but interesting questions about a protein structure we can answer using Python programming:

-   What is the molecular weight of the protein?
-   What is the modelled sequence? We know the UniPro sequence, but is it the same as the one in the crystal?
-   What is the average B-factor per-residue? Would be neat to separate by main-chain and side-chain atoms.
-   Does the protein have any disulphide bonds?

Import the structure file:

```{python}
filename = "pdb_files/4INS.pdb" 
structure_file = gemmi.read_structure ( filename ) # remember gemmi.whatever?
print(structure_file) # to delete

```

Extract the first model from the structure object:

```{python}
model = structure_file[0] # there can be more than one model per structure file!
                          # in computer science 0 is the first index, so we are
                          # getting the first (and only) model in the file

print(model) # to delete

```

You can see all the attributes and methods available for the model object with:
```{python}
dir(model)
```

You can also click on it in the Environment Pane.


One of the methods calculates the molecular weight of the protein:

```{python}
print ( "This protein weight is", model.calculate_mass(), "Da" )
```

Which can be formatted to two decimal places:
```{python}
print ( "This protein weight is %.2f Da" % model.calculate_mass() )
```
Each chain in the model can be accessed by indexing the model object:

```{python}
print(model[0])
```

```{python}
print(model[1])
```

```{python}
print(model[2])
```

```{python}
print(model[3])
```
You can iterate through the chains in the model with a for loop:

```{python}
for polymer in model :
  print (polymer)
```
You can iterate through the chains and through the residues in the chain with two nested for loops: 
```{python}
for polymer in model :
  print (polymer)
  for steve in polymer :
    print(steve)

```

A major difference between R and Python is that R uses various braces to indicate blocks of code. The indentation makes the code easier to follow. In Python the indentation is not just for readability, it is part of the syntax. It is the indentation itself which indicates the blocks of code.


 You can use to nested loops to iterate through the chains and residues and extra and print the chain name and the one letter code for the amino acid:

```{python}
for polymer in model :
  sequence = ""
  print (polymer)
  for steve in polymer :
    sequence += gemmi.find_tabulated_residue(steve.name).one_letter_code.upper()
  print ("Polymer %s: %s" % (polymer.name,sequence))
```

The `+=` operator is a short-hand way of writing `sequence = sequence + gemmi.find_tabulated_residue(steve.name).one_letter_code.upper()`. It is a common operator in many programming languages. It grows the string `sequence` by adding the one letter code for the amino acid each time the inner loops executes.


We are going to use our new skills for calculating average B-factors for this structure. We will make a crude separation between protein and waters, and we will introduce another loop to go through every atom in every residue. We will rely on the fact that the `find_tabulated_residue()` function does not return a code for monomers/residues that are not amino acids. In that case, we will be using `residue.name` to check if the monomer we are checking is a water molecule.

```{python}
import statistics        # we will need to do stats, so we import the module

aminoacid_bfactors = [ ] # these are lists where we are going to store the
rest_bfactors      = [ ] # individual B-factors

for chain in model :
  for monomer in chain : # we'll call it monomer this time (name doesn't matter)
    for atom in monomer :
      if gemmi.find_tabulated_residue(monomer.name).is_amino_acid() :
        aminoacid_bfactors.append ( atom.b_iso )
      else :
        rest_bfactors.append ( atom.b_iso )

print ( "Protein part mean(stdev) : %.2f (%.2f)" % \
      ( statistics.mean ( aminoacid_bfactors ), statistics.stdev ( aminoacid_bfactors ) ))
print ( "Rest of atoms mean(stdev): %.2f (%.2f)" % \
      ( statistics.mean ( rest_bfactors ), statistics.stdev ( rest_bfactors ) ))
```
Hopefully the code is more or less self-explanatory. The key bit in this new part is that we have used the `is_amino_acid()` function to check what type of monomer we're encountering at each step. You might wonder, how do we come up with all those suggestions for wonderful functions that do exactly what we need? Well, have a look at the [docs](https://project-gemmi.github.io/python-api/gemmi.ResidueInfo.html) for the `gemmi` module.


At this point you might be starting to want to wonder how to relate the notion of 'Class' to the names we have been using here so far. We will try to explain this as easy as possible.

We define a variable just by naming it, for example `aminoacid_bfactors` is a list because we have assigned `[ ]` – an empty list – to it in `aminoacid_bfactors = [ ]`.


Other variables are assigned whatever functions return, such as s`tructure_file = gemmi.read_structure ( filename )` earlier in the notebook. `gemmi.read_structure()` returns a Structure class, as it says on the documentation for that function.


Once you've got a variable of the `Structure` class, you can start invoking the functions that come with it.


🔨   Have a deep dive into the docs, see what functions are available and think about potential uses for them. Discuss those ideas with your neighbours and tell us about them! 😃


```{python}
# we do not need to import gemmi or statistics again because the notebook
# remembers the previous block where we have imported the module and
# read the structure file

from matplotlib import pyplot as plt


for chain in model :

  main_chain_bfactors = [ ] # we will store per residue averages here
  side_chain_bfactors = [ ]
  residue_numbers     = [ ] # residue 1 could be reside 42 according to UniProt

  for monomer in chain : # we'll call it monomer this time (name doesn't matter)

    monomer_main_bfactor = [ ] # one for main-chains, one for side-chains
    monomer_side_bfactor = [ ]
    if gemmi.find_tabulated_residue(monomer.name).is_amino_acid() :
      # we only want per-residue information on amino acids
      residue_numbers.append ( int(monomer.seqid.num) )

      for atom in monomer : # EDIT HERE! You can find the answers with Moorhen.
        if ( atom.name == "CA" or atom.name == "C" or
              atom.name == "N" or atom.name == "O" ) :
          monomer_main_bfactor.append ( atom.b_iso ) # clue: main chain atoms
        else :
          monomer_side_bfactor.append ( atom.b_iso )

      main_chain_bfactors.append ( statistics.mean ( monomer_main_bfactor ) )
      if len ( monomer_side_bfactor ) > 0 :
        side_chain_bfactors.append ( statistics.mean ( monomer_side_bfactor ) )
      else :
        side_chain_bfactors.append ( 0.0 ) # special case for glycine

  plt.title ("\nB-factor plot for chain " + chain.name,
             fontsize = 15,
             fontweight = "bold" )

  plt.plot ( residue_numbers, main_chain_bfactors, "r--", label="main chain")
  plt.bar ( residue_numbers, side_chain_bfactors, alpha=0.4, label="side chain" )

  plt.xlabel ( "Residue" )
  plt.ylabel ( "Isotropic B-factor" )
  plt.ylim ( 0.0 )
  plt.legend ( )
  plt.show ( )
  print ("\n\n")


```

The code above looks complicated, but it's just an extension of what we had done previously, plus a bit of code at the end for plotting the B-factors. This last bit of code uses matplotlib, which is great for producing graphs in Python. You could tweak these plots to no end!

🔨   Customise the look of your B-factor plots using this[ really good Colab notebook](https://colab.research.google.com/github/amanchadha/aman-ai/blob/master/matplotlib.ipynb#scrollTo=il1nR5kXSmQ9) on the use of matplotlib as a reference. If you get stuck, ask one of us for help 🙂

💡   One potential improvement of these plots would be to draw a horizontal line where the Wilson B is. You can find out its value on the PDB validation report, and you will learn how to draw horizontal lines in the next example anyway.

And on the subject of customisation, it would be great if we could do the same for AlphaFold models. We know that AlphaFold stores its pLDDT in the B-factor column, so perhaps it's doable with very little effort?

🔨   Run the following code to get a nice plot for an AlphaFold prediction for human Lysozyme (UniProt ID A0A080YUZ9). This time we will be getting an AlphaFold model from the database, and we will use Python's wget module for that. We used the wget command at the start of the workshop (scroll up and have a look) and now we are going to demonstrate how we can use it directly from Python. But before that, we need to install it using dear old pip

```{python}
# we do not need to import gemmi or statistics again because the notebook
# remembers the previous block where we have imported the module and
# read the structure file

from matplotlib import pyplot as plt # need to create a new plot
import wget

filename = wget.download("https://alphafold.ebi.ac.uk/files/AF-A0A080YUZ9-F1-model_v4.pdb", "pdb_files")

structure_file = gemmi.read_structure ( filename )
model = structure_file[0]

for chain in model : # just one chain with non-multimer AlphaFold

  plddts          = [ ] # we will store per residue pLDDT here
  residue_numbers = [ ]

  for monomer in chain :
    residue_numbers.append ( int(monomer.seqid.num) )
    plddts.append (monomer[0].b_iso) # we just need to get the first atom's pLDDT

plt.title ("\npLDDT plot for chain " + chain.name,
            fontsize = 15,
            fontweight = "bold" )

plt.plot ( residue_numbers, plddts, "r--", label="pLDDT")

plt.xlabel ( "Residue" )
plt.ylabel ( "pLDDT" )
plt.ylim ( 0.0, 100.0 )
plt.axhline(y=90.0, color="blue")
plt.axhline(y=70.0, color="turquoise")
plt.axhline(y=50.0, color="gold")
plt.axhline(y=40.0, color="orange")
plt.legend ( )
plt.show ( )
```


The code is actually simpler than what we had for the main and side chain B-factor averages. This time we only care about per residue numbers. We have added a number of horizontal lines coloured according to the [AlphaFold database entry](https://www.alphafold.ebi.ac.uk/entry/A0A080YUZ9) so you can see where pLDDT gets too dodgy.


🔨   Go to the [AlphaFold database entry](https://www.alphafold.ebi.ac.uk/entry/A0A080YUZ9) page and compare your results with the available graphics, including the Predicted Aligned Error (PAE). What is going on with the N-terminus? Discuss.


💡   Remember what we said about AlphaFold not doing post-translational modifications? That includes the ever-present disulphide bonds. The structure we are looking at is a Lysozyme, which as you will remember from past workshops, relies on disulphide bonds to form the final fold. Wouldn't it be great if we could check if, despite not being formally linked in the PDB/mmCIF file, the cysteines in this AlphaFold model are consistent with the presence of disulphide bonds?


Here is some new code that checks for that.

🔨   You'll have to complete it though!


```{python}
# we do not need to import gemmi or statistics again because the notebook
# remembers the previous block where we have imported the module and
# read the structure file

distance = 3.0 # change for a sensible value!

for chain in model : # just one chain with non-multimer AlphaFold
  neighbour_search = gemmi.NeighborSearch ( model,
                                            structure_file.cell,
                                            distance ).populate ( include_h=False )

  cysteines = gemmi.Selection ( '(CYS)' ) # fill in the three-letter code for cysteine!
  for model in cysteines.models(structure_file) :
    for chain in cysteines.chains(model) :
      for residue in cysteines.residues(chain) :
        print ("Checking " + residue.name + " %i" % residue.seqid.num )
        marks = neighbour_search.find_neighbors ( residue.sole_atom("SG"), # name of sulphur atom in cysteine
                                                  0, distance )
        for mark in marks :
          cra = mark.to_cra ( model )
          if cra.residue.seqid.num != residue.seqid.num :
            print ( "Potential disulphide bond found: " + cra.residue.name,
                    " %i" % cra.residue.seqid.num, " to " + residue.name +
                    " %i" % residue.seqid.num )
```

In this bit of code we are finding cysteines in a protein's sequence with `gemmi.Selection()`, then searching for neighbours within a cut-off distance (your pick) from the position of their sulphur atoms (which you'll need to identify using Moorhen or other tools), and then reporting the ones that don't include atoms from the original cysteine, as the search is atom-based.

🔨   Check that your code does what it's supposed to be doing. Use Moorhen to download A0A080YUZ9 and go to the positions reported by your code, check that the cysteines are within sensible bonding distance and in the expected orientation.


💡   You probably have spotted that the code reports every potential pair of cysteines twice. That's one thing you could try to address if you were looking to improve this code!


## Bonus: calculation of torsion angles

Here is one more bit of code for you to play with if you have finished all the previous steps and still want to learn more. We will calculate the three torsion angles involved in the formation of the protein backbone for a high resolution crystallographic structure – a monomer of thaumatin at 0.9 angstroems – plotting omega (should be close to planar) and phi,psi (ramachandran angles) separately.

🔨   Lots to customise on these plots: from the appearance of the data to what numbers are represented, all up to you to improve.

```{python}
# we do not need to import gemmi or statistics again because the notebook
# remembers the previous block where we have imported the module and
# read the structure file

from matplotlib import pyplot as plt # need to create a new plot
from math import degrees, isnan
import wget
import numpy as np

filename = wget.download("https://files.rcsb.org/download/5X9L.pdb", "pdb_files")

structure_file = gemmi.read_structure ( filename )
model = structure_file[0]

residue_numbers = [ ]
omega_angles = [ ]
phi_angles = [ ]
psi_angles = [ ]

for chain in model :
  for residue in chain :
    next_res = chain.next_residue ( residue )
    prev_res = chain.previous_residue ( residue )
    if next_res:
      omega = gemmi.calculate_omega(residue, next_res)
      if not isnan(degrees(omega)):
        omega_angles.append ( degrees ( omega ) )
      residue_numbers.append ( residue.seqid.num )
    phi, psi = gemmi.calculate_phi_psi ( prev_res, residue, next_res )
    phi_angles.append ( phi )
    psi_angles.append ( psi )

plt.title ("\nOmega plot",
             fontsize = 15,
             fontweight = "bold" )
# counts, bins = np.histogram ( omega_angles )
# plt.stairs ( counts, bins )

plt.hist(omega_angles, bins=30)
plt.xlabel("Angle / Degrees")
plt.ylabel("Frequency")
plt.show ( )

print("\n\n")

plt.title ("\nRamachandran angles",
             fontsize = 15,
             fontweight = "bold" )
plt.scatter ( phi_angles, psi_angles )
plt.show ( )

```

```{python}
import session_info
session_info.show()
```

```{r}
devtools::session_info()
```